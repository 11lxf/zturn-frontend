name: workflow-k8s

on:
  # 向 main 分支创建或更新 PR 时触发
  pull_request_target:
    types:
      - opened
      - synchronize # PR创建或代码更新时触发
    branches:
      - main
  # 发布 release 版本时触发
  release:
    types: published
  # 允许手动触发（UI或API）
  workflow_dispatch:
    # 带输入参数
    inputs:
      environment:
        description: 'Deploy target (prod/uat)'
        required: true
        default: 'uat'
        type: choice
        options:
          - prod
          - uat
      debug_mode:
        description: 'Enable debug logs?'
        required: false
        type: boolean

jobs:
  # 构建
  build:
    runs-on: ubuntu-latest
    # 仅允许成员才能触发
    if: contains(fromJSON('["shawflee"]'), github.event.sender.login)
    env:
      MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      SERVICE_NAME: ${{ vars.SERVICE_NAME }}
      DOCKERHUB_URL: ${{ vars.DOCKERHUB_URL }}
      REPO: ${{ vars.REPO }}
      NEXUS_HOST: ${{ vars.NEXUS_HOST }}
    # 输出变量用于第二个job
    outputs:
      version: ${{ steps.build-and-publish.outputs.version }}
      environment: ${{ steps.set-var.outputs.environment }}
    steps:
      # 检出代码-PR触发
      - name: checkout-code
        uses: actions/checkout@v4
        if: github.event_name == 'pull_request_target'
        with:
          ref: ${{ github.event.pull_request.head.sha }} # 指定切换到PR提交的源分支

      # 检出代码-非PR触发
      - name: checkout-code-default-branch
        uses: actions/checkout@v4
        if: github.event_name != 'pull_request_target'

      # 安装node.js 20
      - name: setup-java
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 配置npm仓库缓存，避免每次构建时都重新下载依赖
      - name: cache-local-npm-repository
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: |
            ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 构建前先设置变量
      - id: set-var
        name: set-var
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "release" ]]; then
            echo "IS_RELEASE=true" >> $GITHUB_ENV
            # 读取 release 时候填写的 title 作为版本号
            echo "RELEASE_VERSION=${{ github.event.release.name }}" >> $GITHUB_ENV
            # 发布正式环境
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request_target" ]]; then
            echo "IS_RELEASE=false" >> $GITHUB_ENV
            # 发布测试环境
            echo "environment=uat" >> $GITHUB_OUTPUT
          elif [[  "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "IS_RELEASE=false" >> $GITHUB_ENV
            # 根据输入参数发布对应环境
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      # npm构建并上传到仓库
      - id: build-and-publish
        name: build-and-publish
        run: |
          set -ex
          PACKAGE_NAME=""
          npm install
          echo "Release is ${IS_RELEASE}"
          # 判断当前构建是否为版本构建，以及定义构建变量(包版本,包服务名称,包编译存放路径,包类型,包编译名称,包打包名称)
          if [ "${IS_RELEASE}"x = "false"x ]; then
            # 以时间序列为版本，并拼接包名称
            BUILD_TIME=$(date +"%Y%m%d%H%M%S")
            TEST_VERSION=$BUILD_TIME-$GITHUB_RUN_NUMBER
            PACKAGE_NAME=$SERVICE_NAME-$TEST_VERSION.tar.gz           
            # 保存版本变量到输出变量version
            echo "version=${TEST_VERSION}" >> $GITHUB_OUTPUT
            # npm构建
            npm run build-test
          elif [ "${IS_RELEASE}"x = "true"x ]; then
            # 保存版本变量到输出变量version，并拼接包名称
            echo "version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
            PACKAGE_NAME=$SERVICE_NAME-$RELEASE_VERSION.tar.gz
            # npm构建
            npm run build
          fi
          # 压缩并上传到nexus raw仓库
          tar -zcvf $PACKAGE_NAME dist/
          UPLOAD_URL="$NEXUS_HOST/repository/raw-hosted/vue-build/$SERVICE_NAME/$PACKAGE_NAME"
          curl -v --user $MAVEN_USERNAME:$MAVEN_PASSWORD --upload-file $PACKAGE_NAME $UPLOAD_URL

      # 安装docker
      - name: setup-docker
        uses: docker/setup-docker-action@v4

      # Docker构建并发布到仓库
      - name: build-and-publish-docker
        run: |
          set -ex
          # Maven构建中已经输出版本号，这里直接使用
          VERSION=${{ steps.build-and-publish.outputs.version }}
          echo "VERSION is ${VERSION}"
          # 构建
          IMAGE_NAME=$DOCKERHUB_URL/$REPO/$SERVICE_NAME:$VERSION
          docker build \
          --build-arg SERVICE_NAME=$SERVICE_NAME \
          --build-arg VERSION=$VERSION \
          -t $IMAGE_NAME \
          -f .build/Dockerfile .
          # 登录推送
          docker login $DOCKERHUB_URL -u $MAVEN_USERNAME -p $MAVEN_PASSWORD
          docker push $IMAGE_NAME

  # 部署 k8s
  deploy-k8s:
    # 需要 build 执行完后才执行，否则 job 是并行执行的
    needs: build
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ vars.SERVICE_NAME }}
      SERVICE_HOST: ${{ vars.SERVICE_HOST }}
      SERVICE_HOST_TEST: ${{ vars.SERVICE_HOST_TEST }}
      VERSION: ${{ needs.build.outputs.version }}
      ENVIRONMENT: ${{ needs.build.outputs.environment }}
      REPO: ${{ vars.REPO }}
    steps:
      # 为了安全，部署检出代码只使用主仓的分支代码
      - name: checkout-code-default-branch
        uses: actions/checkout@v4

      # 替换环境变量
      - name: replace-env
        run: |
          echo "0.切换到k8s部署目录.deploy/k8s"
          cd .deploy/k8s
          echo "1.根据环境变量生成kustomization.yaml"
          envsubst < base/kustomization.yaml > base/kustomization-new.yaml 
          mv base/kustomization-new.yaml base/kustomization.yaml
          envsubst < overlays/uat/kustomization.yaml > overlays/uat/kustomization-new.yaml
          mv overlays/uat/kustomization-new.yaml overlays/uat/kustomization.yaml
          envsubst < overlays/prod/kustomization.yaml > overlays/prod/kustomization-new.yaml
          mv overlays/prod/kustomization-new.yaml overlays/prod/kustomization.yaml

      # uat kubectl部署k8s相关资源
      - name: kubectl-apply-uat
        if: needs.build.outputs.environment == 'uat'
        uses: actions-hub/kubectl@v1.31.1
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args:  apply -k .deploy/k8s/overlays/uat/.

      # prod kubectl部署k8s相关资源
      - name: kubectl-apply-prod
        if: needs.build.outputs.environment == 'prod'
        uses: actions-hub/kubectl@v1.31.1
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -k .deploy/k8s/overlays/prod/.

      # 健康检查
      - name: check
        run: |
          echo "0.健康检查..."
          url="https://${SERVICE_HOST}"
          if [ "$ENVIRONMENT"x = "uat"x ]; then
            url="https://${SERVICE_HOST_TEST}"
          fi
          status_check() {
            echo `curl -I -m 10 -o /dev/null -s -w %{http_code} $url`
          }

          # 设置最大尝试次数
          max_attempts=30
          attempts=0

          result=$(status_check)
          until [ "200"x = "$result"x ] || [ $attempts -ge $max_attempts ]
          do
            result=$(status_check)
            # ((attempts++)) 有时候会报错
            attempts=$((attempts+1))
            sleep 2
          done

          # 检查是否达到最大尝试次数
          if [ $attempts -ge $max_attempts ]; then
            echo "Timeout reached, status is not 200"
            exit 1 # 返回错误状态码
          else
            echo "Status is 200"
            exit 0 # 返回成功状态码
          fi
